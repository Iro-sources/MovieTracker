// <auto-generated />
using System;
using BackgroundServies.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackgroundServices.Migrations
{
    [DbContext(typeof(ComingSoonDbContext))]
    [Migration("20230507192156_Nullable")]
    partial class Nullable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BackgroundServies.Models.ComingMovies+NewMovieDataDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContentRating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Directors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Genres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IMDbRating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IMDbRatingCount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetacriticRating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Plot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReleaseState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuntimeMins")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuntimeStr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stars")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Movies", (string)null);
                });

            modelBuilder.Entity("BackgroundServies.Models.ComingMovies+Person", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<string>("DirectorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StarId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.HasIndex("StarId");

                    b.ToTable("People", (string)null);
                });

            modelBuilder.Entity("BackgroundServies.Models.ComingMovies+Person", b =>
                {
                    b.HasOne("BackgroundServies.Models.ComingMovies+NewMovieDataDetail", null)
                        .WithMany("DirectorList")
                        .HasForeignKey("DirectorId");

                    b.HasOne("BackgroundServies.Models.ComingMovies+NewMovieDataDetail", null)
                        .WithMany("StarList")
                        .HasForeignKey("StarId");
                });

            modelBuilder.Entity("BackgroundServies.Models.ComingMovies+NewMovieDataDetail", b =>
                {
                    b.Navigation("DirectorList");

                    b.Navigation("StarList");
                });
#pragma warning restore 612, 618
        }
    }
}
